import torch
from tqdm.auto import tqdm
from opt_einsum import contract
import torch.utils.checkpoint
import itertools
from collections import namedtuple

#======================== Z2 =================================

def RepDim(dimV1R1,dimV1R2,dimV2R1,dimV2R2):
    return dimV1R1*dimV2R1+dimV1R2*dimV2R2,dimV1R1*dimV2R2+dimV1R2*dimV2R1

def RepMat(dimV1R1,dimV1R2,dimV2R1,dimV2R2):
    dimV1=dimV1R1+dimV1R2
    dimV2=dimV2R1+dimV2R2
    P=torch.zeros([dimV1*dimV2,dimV1,dimV2])
    counter=0
    for i in range(dimV1R1):
        for j in range(dimV2R1):
            P[counter,i,j]=1
            counter+=1
    for i in range(dimV1R2):
        for j in range(dimV2R2):
            P[counter,dimV1R1+i,dimV2R1+j]=1
            counter+=1
    for i in range(dimV1R1):
        for j in range(dimV2R2):
            P[counter,i,dimV2R1+j]=1
            counter+=1
    for i in range(dimV1R2):
        for j in range(dimV2R1):
            P[counter,dimV1R1+i,j]=1
            counter+=1
    return P

def Z2_sectors(T,dimR):
    if len(T.shape)==2*len(dimR): dimR=[d for d in dimR for _ in range(2)]
    assert len(T.shape)==len(dimR) and all(i==sum(j) for i,j in zip(T.shape,dimR))
    for sector in itertools.product(range(2),repeat=len(dimR)):
        begin=[sum(dimR[leg][:rep]) for leg,rep in enumerate(sector)]
        end=[sum(dimR[leg][:rep+1]) for leg,rep in enumerate(sector)]
        slices=[slice(b,e) for b,e in zip(begin,end)]
        yield sector,slices

def Z2_sector_norm(T,dimR):
    sqrnorm=torch.zeros(2)
    for sector,slices in Z2_sectors(T,dimR):
        sqrnorm[sum(sector)%2]+=T[slices].norm()**2
    return sqrnorm**.5

def project_Z2(T,dimR,weights=[1,0],tolerance=float('inf')):
    Tn=torch.zeros(T.shape)
    sqrnorm=torch.zeros(2)
    for sector,slices in Z2_sectors(T,dimR):
        sqrnorm[sum(sector)%2]+=T[slices].norm()**2
        Tn[slices]=T[slices]*weights[sum(sector)%2]
    norm=sqrnorm**.5
    assert not(weights[1]==0 and norm[1]>norm[0]*tolerance)
    assert not(weights[0]==0 and norm[0]>norm[1]*tolerance)
    return Tn

#============================= Forward Layers ======================================
    
def _forward_layer_2D(Ta,Tb,ww:"list[torch.tensor]",gg:"list[list[torch.tensor]]",dimR:"list[list[int]]"=None):
    #      O  | O                 
    #    /v2-T1-u2\       0       2
    #  -w     |    w-    2T3  -> 0T'1  
    #    \v1-T2-u1/       1       3
    #      O  | O                    
    if gg:
        Ta=contract('ijkl,Kk,Ll->ijKL',Ta,*gg[0])
        Tb=contract('ijkl,Kk,Ll->ijKL',Tb,*gg[1])
    if dimR:
        P=RepMat(dimR[1][0],dimR[1][1],dimR[1][0],dimR[1][1])
        wP=contract('ab,bij->aij',ww[0],P)
    else:
        wP=ww[0].reshape(-1,Ta.shape[2],Tb.shape[2])
    Tn=contract('ijkl,jmno,akn,blo->abim',Ta,Tb,wP,wP.conj())
    return Tn

def _forward_layer_3D(Ta,Tb,ww:"list[torch.tensor]",gg:"list[list[torch.tensor]]",dimR:"list[list[int]]"=None):
    if gg:
        Ta=contract('ijklmn,Kk,Ll,Mm,Nn->ijKLMN',Ta,*gg[0])
        Tb=contract('ijklmn,Kk,Ll,Mm,Nn->ijKLMN',Tb,*gg[1])
    if dimR:
        P1=RepMat(dimR[1][0],dimR[1][1],dimR[1][0],dimR[1][1])
        wP1=contract('ab,bij->aij',ww[0],P1)
        P2=RepMat(dimR[2][0],dimR[2][1],dimR[2][0],dimR[2][1])
        wP2=contract('ab,bij->aij',ww[1],P2)
    else:
        wP1=ww[0].reshape(-1,Ta.shape[2],Tb.shape[2])
        wP2=ww[1].reshape(-1,Ta.shape[4],Tb.shape[4])
    Tn=contract('ijklmn,jopqrs,akp,blq,cmr,dns->abcdio',Ta,Tb,wP1,wP1.conj(),wP2,wP2.conj())
    return Tn

def _checkpoint(function,*args,use_checkpoint=True):
    if use_checkpoint and any(x.requires_grad for x in args):
        return torch.utils.checkpoint.checkpoint(function,*args)
    else:
        return function(*args)
    
def forward_layer(Ta,Tb,ww,dimR=None,use_checkpoint=False):
    forward_layer={4:_forward_layer_2D,6:_forward_layer_3D}[len(Ta.shape)]
    def forward_layer_wrapper(Ta,Tb,*ww):
        return forward_layer(Ta,Tb,ww=ww,dimR=dimR)
    return _checkpoint(forward_layer_wrapper,Ta,Tb,*ww,use_checkpoint=use_checkpoint)
    
def forward_tensor(T0,isometries,dimRs=None,use_checkpoint=False,return_layers=False):
    dimRs=dimRs or [None]*len(isometries)
    T,logTotal=T0,0
    if return_layers: 
        Ts,logTotals=[T],[0]
    for layer in tqdm(range(len(isometries)),leave=False):
        norm=T.norm()
        T=T/norm
        logTotal=2*(logTotal+norm.log())
        T=forward_layer(T,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
        if return_layers: 
            Ts.append(T);logTotals.append(logTotal)
    return (Ts,logTotals) if return_layers else (T,logTotal)

def forward_observable_tensor(T0,T0_op,isometries,dimRs=None,start_layer=0,    checkerboard=False,use_checkpoint=False,return_layers=False,cached_Ts=None):
    
    spacial_dim=len(T0.shape)//2
    dimRs=dimRs or [None]*len(isometries)
    T,logTotal=forward_tensor(T0,isometries[:start_layer],dimRs=dimRs[:start_layer],use_checkpoint=use_checkpoint,return_layers=return_layers)
    T_op=T0_op
    if return_layers:
        Ts,T,logTotals,logTotal=T,T[-1],logTotal,logTotal[-1]
        T_ops=[None]*start_layer+[T_op]
    for layer in tqdm(range(start_layer,len(isometries)),leave=False):
        norm=T.norm()
        T,T_op=T/norm,T_op/norm
        logTotal=2*(logTotal+norm.log())
        if cached_Ts:
            T1=cached_Ts[layer+1]
        else:
            T1=forward_layer(T,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
        T2=forward_layer(T,T_op,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
        T3=forward_layer(T_op,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
        T3=-T3 if (checkerboard and layer<spacial_dim) else T3
        T,T_op=T1,(T2+T3)/2
        if return_layers:
            Ts.append(T);T_ops.append(T_op);logTotals.append(logTotal)
    return (Ts,T_ops,logTotals) if return_layers else (T,T_op,logTotal)
    
def forward_two_observable_tensors(T0,T0_op1,T0_op2,coords:"list[int]",isometries,dimRs=None,checkerboard=False,use_checkpoint=False,cached_Ts=None):
    spacial_dim=len(T0.shape)//2
    dimRs=dimRs or [None]*len(isometries)
    nLayers=len(isometries)
    
    T,T_op1,T_op2,T_op12,logTotal=T0,T0_op1,T0_op2,None,0
    for layer in range(nLayers):
        norm=T.norm()
        T,T_op1,T_op2,T_op12=(t/norm if t is not None else None for t in (T,T_op1,T_op2,T_op12))
        logTotal=2*(logTotal+norm.log())
        if cached_Ts:
            T1=cached_Ts[layer+1]
        else:
            T1=forward_layer(T,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
            
        if not all(c==0 for c in coords):
            c=coords[0]%2
            T2=forward_layer(T_op1,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
            if c==0:
                T3=forward_layer(T_op2,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
            elif c==1:
                T3=forward_layer(T,T_op2,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
                T3=-T3 if checkerboard and layer<spacial_dim else T3
            coords=coords[1:]+[coords[0]//2]
            T,T_op1,T_op2=T1,T2,T3
        elif T_op1 is not None and T_op2 is not None:
            T2=forward_layer(T_op1,T_op2,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
            T2=-T2 if checkerboard and layer<spacial_dim else T2
            T,T_op12,T_op1,T_op2=T1,T2,None,None
        else:
            T2=forward_layer(T_op12,T,isometries[layer],dimRs[layer],use_checkpoint=use_checkpoint)
            T,T_op12=T1,T2
    return T,T_op12,logTotal
    
    
    
def trace_tensor(T):
    eq={4:'aabb->',6:'aabbcc->'}[len(T.shape)]
    return contract(eq,T)

def trace_two_tensors(T):
    eq={4:'abcc,badd->',6:'abccdd,baeeff->'}[len(T.shape)]
    return contract(eq,T,T)

def get_w_random(dimRn0,dimRn1,max_dim):
    max_dim-=max_dim%2
    dimRnn0,dimRnn1=max_dim//2,max_dim-max_dim//2
    w=torch.zeros((max_dim,dimRn0+dimRn1))
    w[:dimRnn0,:dimRn0]=generate_random_isometry(dimRnn0,dimRn0)
    w[dimRnn0:,dimRn0:]=generate_random_isometry(dimRnn1,dimRn1)
    return w,dimRnn0,dimRnn1

def generate_random_isometry(dim0,dim1):
    dim=max(dim0,dim1)
    A=torch.randn(dim,dim)
    U=torch.matrix_exp(A-A.t())
    U=U[:dim0,:dim1]
    return U

def generate_isometries_random(dimR:"list[list[int]]",max_dim,nLayers):
    dimRs=[]
    isometries=[]
    spacial_dim=len(dimR)
    for layer in range(nLayers):
        dimRs.append(dimR.copy())
        ww=[]
        dimRn=[dimR[-1].copy()]
        for i in range(1,spacial_dim):
            w,dimR0,dimR1=get_w_random(dimR[i][0],dimR[i][1],max_dim)
            ww.append(w)
            dimRn.append([dimR0,dimR1])
        dimR=dimRn
        isometries.append(ww)
    dimRs.append(dimR.copy())
    return isometries,dimRs

#============================= Generate Isometries ======================================

def get_w_HOSVD(MM,max_dim,dimRn:"list[int]"=None):
    # w MM wh
    if dimRn is None:
        S,U=torch.linalg.eigh(MM)#ascending, U S Uh=MM
        w=(U.flip(-1).T)[:max_dim]
        return w
    else:
        MM0,MM1=MM[:dimRn[0],:dimRn[0]],MM[dimRn[0]:,dimRn[0]:]
        S0,U0=torch.linalg.eigh(MM0)#ascending, U S Uh=MM
        S1,U1=torch.linalg.eigh(MM1)
        S,U=[S0,S1],[U0,U1]
        max_dim=min(max_dim,sum(dimRn))
        chosenEigens=sorted([(-s,0,i) for i,s in enumerate(S0)]+[(-s,1,i) for i,s in enumerate(S1)])[:max_dim]
        chosenEigens.sort(key=lambda x:x[1])
        
        shift=[0,dimRn[0]]
        dimRnn=[0,0]
        w=torch.zeros((max_dim,sum(dimRn)))
        for i,(s,rep,col) in enumerate(chosenEigens):
            w[i,shift[rep]:shift[rep]+dimRn[rep]]=U[rep][:,col]
            dimRnn[rep]+=1
        return w,dimRnn

        

def HOTRG_layer_3D(T1,T2,max_dim,dimR:"list[list[int]]"=None):
    MM1=contract('ijklmn,jopqrs,itulmn,tovqrs->kpuv',T1,T2,T1.conj(),T2.conj())
    MM2=contract('ijklmn,jopqrs,itklun,topqvs->mruv',T1,T2,T1.conj(),T2.conj())
    if dimR:
        P1=RepMat(dimR[1][0],dimR[1][1],dimR[1][0],dimR[1][1])
        dimRn1=RepDim(dimR[1][0],dimR[1][1],dimR[1][0],dimR[1][1])
        MM1=contract('ijIJ,aij,AIJ->aA',MM1,P1,P1.conj())
        P2=RepMat(dimR[2][0],dimR[2][1],dimR[2][0],dimR[2][1])
        dimRn2=RepDim(dimR[2][0],dimR[2][1],dimR[2][0],dimR[2][1])
        MM2=contract('ijIJ,aij,AIJ->aA',MM2,P2,P2.conj())

        w1,dimRnn1=get_w_HOSVD(MM1,max_dim=max_dim,dimRn=dimRn1)
        wP1=contract('ab,bij->aij',w1,P1)
        w2,dimRnn2=get_w_HOSVD(MM2,max_dim=max_dim,dimRn=dimRn2)
        wP2=contract('ab,bij->aij',w2,P2)
    else:
        MM1=MM1.reshape(T1.shape[2]*T2.shape[2],-1)
        MM2=MM2.reshape(T1.shape[4]*T2.shape[4],-1)

        w1=get_w_HOSVD(MM1,max_dim=max_dim,dimRn=None)
        wP1=w1.reshape(-1,T1.shape[2],T2.shape[2])
        w2=get_w_HOSVD(MM2,max_dim=max_dim,dimRn=None)
        wP2=w2.reshape(-1,T1.shape[4],T2.shape[4])

    Tn=contract('ijklmn,jopqrs,akp,blq,cmr,dns->abcdio',T1,T2,wP1,wP1.conj(),wP2,wP2.conj())
    return (Tn,[w1,w2],[dimRnn1,dimRnn2,dimR[0]]) if dimR else (Tn,[w1,w2])
    
def HOTRG_layer_2D(T1,T2,max_dim,dimR:"list[list[int]]"=None):
    MM=contract('ijkl,jmno,ipql,pmro->knqr',T1,T2,T1.conj(),T2.conj())
    if dimR:
        P=RepMat(dimR[1][0],dimR[1][1],dimR[1][0],dimR[1][1])
        dimRn=RepDim(dimR[1][0],dimR[1][1],dimR[1][0],dimR[1][1])
        MM=contract('ijIJ,aij,AIJ->aA',MM,P,P.conj())

        w,dimRnn=get_w_HOSVD(MM,max_dim=max_dim,dimRn=dimRn)
        wP=contract('ab,bij->aij',w,P)
    else:
        MM=MM.reshape(T1.shape[2]*T2.shape[2],-1)

        w=get_w_HOSVD(MM,max_dim=max_dim)
        wP=w.reshape(-1,T1.shape[2],T2.shape[2])
        
    Tn=contract('ijkl,jmno,akn,blo->abim',T1,T2,wP,wP.conj())
    return (Tn,[w],[dimRnn,dimR[0]]) if dimR else (Tn,[w])

def HOTRG_layer(T1,T2,max_dim,dimR:"list[list[int]]"=None):
    foo={4:HOTRG_layer_2D,6:HOTRG_layer_3D}[len(T1.shape)]
    return foo(T1,T2,max_dim,dimR=dimR)

    
def HOTRG_layers(T0,max_dim,nLayers,dimR:"list[list[int]]"=None,return_tensors=False):
    #dimR[axis][rep]
    T,logTotal=T0,0
    isometries=[]
    if dimR:
        dimRs=[dimR.copy()]
    if return_tensors:
        Ts,logTotals=[T],[0]
    for layer in tqdm(range(nLayers),leave=False):
        norm=T.norm()
        T=T/norm
        logTotal=2*(logTotal+norm.log())
        _=HOTRG_layer(T,T,max_dim=max_dim,dimR=dimR)
        if dimR:
            T,ww,dimR=_
            dimRs.append(dimR.copy())
        else:
            T,ww=_
        isometries.append(ww)
        if return_tensors:
            Ts.append(T);logTotals.append(logTotal)
    rtval=(isometries,)
    if dimR: 
        rtval+=(dimRs,)
    if return_tensors: 
        rtval+=(Ts,logTotals,)
    return rtval
        


    