# https://arxiv.org/pdf/1412.0732.pdf
# https://arxiv.org/pdf/1509.07484.pdf



import torch
import itertools as itt
from opt_einsum import contract_path
from opt_einsum import contract as contract
from safe_svd import svd,sqrt,svd_tensor
from dataclasses import dataclass
from tqdm.auto import tqdm
from math import prod


def scon(ops,idxs):
    idxo=list(sorted(set((i for idx in idxs for i in idx if i<0)),reverse=True))
    args=list(itt.chain(*zip(ops,idxs)))+[idxo]
    return contract(*args)







def build_B(u, v, w, A1, A2):
    upb = upper_block(u, v, w, A1, A2)
    B = scon((upb, upb_dg(upb)), ([-1,-2,1,2], [1,2,-3,-4]))
    return B


def split_B(B, max_dim):
    #U, S, V = B.svd((0,3), (1,2), chis=pars["chis_trg"],
    #                eps=pars["opt_eps_chi"],
    #                print_errors=pars["print_errors"])
    #S_sqrt = S.sqrt()
    #U = U.transpose((0,2,1))
    #US = U.multiply_diag(S_sqrt, 1, direction="r")
    #SV = V.multiply_diag(S_sqrt, 0, direction="l")
    U,S,V=svd(B,(0,3),(1,2))
    U,S,V=U[...,:max_dim],S[:max_dim],V[:max_dim,...]
    S=S**.5
    U=scon((U,S),((-1,-2,-3),(-3)))
    V=scon((S,V),((-1),(-1,-2,-3)))
    return U,V




def build_z(v, w, BUS, BSV,max_dim):
    BSV_dg = BSV.permute((0,2,1)).conj()
    BUS_dg = BUS.permute((2,1,0)).conj()
    M = scon((v_dg(v), w_dg(w),
              BSV, BUS,
              v_prime(v), w_prime(w), v_dg(v), w_dg(w),
              BSV_dg, BUS_dg,
              v_prime(v), w_prime(w)),
             ([-1,5,13], [5,-2,14],
              [7,13,11], [14,8,9],
              [11,1,3], [1,9,4], [3,2,12], [2,4,10],
              [7,12,15], [10,8,16],
              [15,6,-3], [6,16,-4]))
    M_diff = M - M.conjugate().transpose((2,3,0,1))
    U,S,_=svd_tensor(M,(0,1),(2,3))
    U,S=U[...,:max_dim],S[:max_dim]

    #S, U = M.eig((0,1), (2,3), chis=pars["chis_trg"], hermitian=True,
    #             eps=pars["opt_eps_chi"], print_errors=pars["print_errors"])
    z = U.permute((2,0,1)).conj()
    return z 



def build_A_new(v, w, z, BUS, BSV):
    # This is O(chi^6).
    A_new = scon((z, v_dg(v), w_dg(w), BSV, BUS,
                  v_prime(v), w_prime(w), z_dg(z)),
                 ([-2,3,4], [3,1,7], [1,4,10], [-1,7,9], [10,-3,8],
                  [9,2,5], [2,8,6], [5,6,-4]))
    return A_new

def upper_block(u, v, w, A1,A2):
    upb = scon((w, v, u, A1,A2),
                ([-1,6,2], [4,-2,1], [6,4,5,3], [2,5,7,-3], [7,3,1,-4]))
    return upb

def u_dg(u):
    return u.permute((2,3,0,1)).conj()


def v_dg(v):
    return v.permute((0,2,1)).conj()


def v_taudg(v):
    return v.permute((0,2,1)).conj()


def v_prime(v):
    return v.permute((1,2,0))


def v_hat(v, gauges):
    v_hat = v.permute((1,0,2)).conj()
    if gauges["G_hh"] is not None:
        v_hat = scon((v_hat, gauges["G_hh"]), ([-1,-2,3], [3,-3]))
    return v_hat


def w_dg(w):
    return w.permute((2,1,0)).conj()


def w_taudg(w):
    return w.permute((2,1,0)).conj()


def w_prime(w):
    return w.permute((2,0,1))


def w_hat(w, gauges):
    w_hat = w.permute((1,0,2)).conj()
    if gauges["G_hh"] is not None:
        w_hat = scon((w_hat, gauges["G_hh"]), ([-1,-2,3], [-3,3]))
    return w_hat


def z_dg(z):
    return z.permute((1,2,0)).conj()


def upb_dg(upb):
    return upb.permute((2,3,1,0)).conj()